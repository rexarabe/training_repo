8.3 Tracing Program Execution and System Calls
The tools we've seen so far examine active process.
However, if you have no idea why a program dies alomost immediately after starting up, even lsof won't help you.
In fact, you'd have a difficult time even running lsof concurrently with a failed command.
The strace (system call trace) and ltrace (library trace) comands can help you discover what a program attemts to do.
These tools produce extraordinarily large amounts of output, but once you know what to look for, you'll have more tools at your disposal for tracking down problems.

8.3.1 strace
Recall that a system call is a privileged operation that a user-space process asks the kernel to perform, asuch as opening and reading data from a file.
the strace utility prints all the system calls that a process makes.
To see it in action, run this command:
$strace cat /dev/null

In Chapter 1, you learned thatt when one process wants to start another process, it invokes the fork() system call to spawn a copy of itself, and then the copy uses a member of the exec() family of system calls to start running a new program.
The strace command begins working on the new process (the copy of the orginal process) just after the fork() call.
Therefore, the first lines of the output from this command should show execve() in action, followed by a memory initialization call, brk(), as follows:
execve("/bin/cat", ["cat", "/dev/null"], 0x7ffc0780f288 /* 58 vars */) = 0
brk(NULL)                               = 0x55a6f3653000
The next part of the output deals primarily with loading shared libraries.
you can ignore this unless you really want to know what the shared library system does.
------------------
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
openat(AT_FDCWD, "/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=135166, ...}) = 0
mmap(NULL, 135166, PROT_READ, MAP_PRIVATE, 3, 0) = 0x7f2837cef000
close(3)                                = 0
access("/etc/ld.so.nohwcap", F_OK)      = -1 ENOENT (No such file or directory)
openat(AT_FDCWD, "/lib/x86_64-linux-gnu/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\2\1\1\3\0\0\0\0\0\0\0\0\3\0>\0\1\0\0\0\260\34\2\0\0\0\0\0"..., 832) = 832
-----------------
In addition, skip past the mmap output until you get to the lines that look like this:
see page 175
This part of the output shows the command at work. First, look at the open() call, which opens a file.
The 3 is a result that means success (3 is the file desciptor that the kernel returns after opening the file).
Below that, you see where cat reads from /dev/null (the read() call, which also has 3 as the file descriptor).
Then there's nothing more to read, so the program closes the file descriptor and exits with exit_group().
What happens when there's a problem?
Try strace cat not_a_file instead and examine the open() call in the resulting output:
-----
see page 175
----
Because open() couldn't open the file, it returned -1 to signal an error.
You can see that strace reports the exact error and gives you a small description of the error.
Missing files are the most common problems with Unix programs, so if the system log and other log information aren't very helpful and you have nowhere else to turn, strace can be of great use.
You can even use it on daemons that detach themselves.
For example:
see page 175

In this example, the -o option to strace logs the action of any child process that crummyd spawns into crummyd_strace.pid, where pid is the process ID of the child process.

8.3.2 ltrace
The ltrace command tracks shared library calls.
The output is similar to thatt of strace, which is why we're mentioning it here, but it doesn't track anything at the kernel level.
Be warned that there are many more shared library calls than system calls.
You'll definitely need to filter the ouput, and ltrace itself has many built-in options to assist you.

Note:
See Section 15.1.4 for more on shared libraries.
The ltrace command doesn't work on statically linked binaries.
